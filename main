Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.


Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
		
		SELECT COUNT(*)
		FROM table_name;
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.
		
	i.		SELECT COUNT(DISTINCT id)
			FROM business
	ii.		SELECT COUNT(DISTINCT business_id)
			FROM hours
	iii.	SELECT COUNT(DISTINCT business_id)
			FROM category	
	iv.		SELECT COUNT(DISTINCT business_id)
			FROM attribute	
	v.		SELECT COUNT(DISTINCT id),
				   COUNT(DISTINCT business_id),
				   COUNT(DISTINCT user_id)
			FROM review
	vi.		SELECT COUNT(DISTINCT business_id)
			FROM checkin
	vii.	SELECT COUNT(DISTINCT id),
				   COUNT(DISTINCT business_id)
			FROM photo
	viii.	SELECT COUNT(DISTINCT user_id),
				   COUNT(DISTINCT business_id)
			FROM tip
	ix.		SELECT COUNT(DISTINCT id)
			FROM user
	x.		SELECT COUNT(DISTINCT user_id)
			FROM friend
	xi.		SELECT COUNT(DISTINCT user_id)
			FROM elite_years
		
		
i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = id, business_id, user_id  =  10000, 8090, 9581
vi. Checkin = 493
vii. Photo = id, business_id   =  10000, 6493
viii. Tip = user_id, business_id  =  537, 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
SELECT *
FROM   USER
WHERE  id IS NULL
        OR NAME IS NULL
        OR review_count IS NULL
        OR yelping_since IS NULL
        OR useful IS NULL
        OR funny IS NULL
        OR cool IS NULL
        OR fans IS NULL
        OR average_stars IS NULL
        OR compliment_hot IS NULL
        OR compliment_more IS NULL
        OR compliment_profile IS NULL
        OR compliment_cute IS NULL
        OR compliment_list IS NULL
        OR compliment_note IS NULL
        OR compliment_plain IS NULL
        OR compliment_cool IS NULL
        OR compliment_funny IS NULL
        OR compliment_writer IS NULL
        OR compliment_photos IS NULL 
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

				SELECT MIN(column_name),
					     MAX(column_name),
					     AVG(column_name)
				FROM table_name
				
	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0	 	max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0 		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
		
		SELECT city, 
			     SUM(review_count) AS tot_reviews
		FROM business
		GROUP BY city
		ORDER BY tot_reviews DESC
	
	Copy and Paste the Result Below:
	
	+-----------------+-------------+
	| city            | tot_reviews |
	+-----------------+-------------+
	| Las Vegas       |       82854 |
	| Phoenix         |       34503 |
	| Toronto         |       24113 |
	| Scottsdale      |       20614 |
	| Charlotte       |       12523 |
	| Henderson       |       10871 |
	| Tempe           |       10504 |
	| Pittsburgh      |        9798 |
	| Montréal        |        9448 |
	| Chandler        |        8112 |
	| Mesa            |        6875 |
	| Gilbert         |        6380 |
	| Cleveland       |        5593 |
	| Madison         |        5265 |
	| Glendale        |        4406 |
	| Mississauga     |        3814 |
	| Edinburgh       |        2792 |
	| Peoria          |        2624 |
	| North Las Vegas |        2438 |
	| Markham         |        2352 |
	| Champaign       |        2029 |
	| Stuttgart       |        1849 |
	| Surprise        |        1520 |
	| Lakewood        |        1465 |
	| Goodyear        |        1155 |
	+-----------------+-------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	SELECT stars             AS star_rating, 
		     SUM(review_count) AS count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars
	ORDER BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

	+-------------+-------+
	| star_rating | count |
	+-------------+-------+
	|         1.5 |    10 |
	|         2.5 |     6 |
	|         3.5 |    88 |
	|         4.0 |    21 |
	|         4.5 |    31 |
	|         5.0 |     3 |
	+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

	SELECT stars               AS star_rating, 
		     SUM(review_count)   AS count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars
	ORDER BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
	+-------------+-------+
	| star_rating | count |
	+-------------+-------+
	|         2.0 |     8 |
	|         2.5 |     3 |
	|         3.0 |    11 |
	|         3.5 |     6 |
	|         4.0 |    69 |
	|         4.5 |    17 |
	|         5.0 |    23 |
	+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name,
		     review_count
	FROM user
	ORDER BY review_count DESC
		
	Copy and Paste the Result Below:
		
	+-----------+--------------+
	| name      | review_count |
	+-----------+--------------+
	| Gerald    |         2000 |
	| Sara      |         1629 |
	| Yuri      |         1339 |

8. Does posing more reviews correlate with more fans? 
	
	No, posting more reviews does not correlate with more fans.

	Please explain your findings and interpretation of the results: 
	
	As can be seen from the results, there is no direct correlation between review count and the number of fans that someone has.
	
	SELECT review_count,
		     fans
	FROM user
	ORDER BY review_count DESC
	
	+--------------+------+
	| review_count | fans |
	+--------------+------+
	|         2000 |  253 |
	|         1629 |   50 |
	|         1339 |   76 |
	|         1246 |  101 |
	|         1215 |  126 |
	|         1153 |  311 |
	|         1116 |   16 |
	|         1039 |  104 |
	|          968 |  497 |
	|          930 |  173 |
	|          904 |   38 |
	|          864 |   43 |
	|          862 |  124 |
	|          861 |  115 |
	|          842 |   85 |
	|          836 |   37 |
	|          834 |  120 |
	|          813 |  159 |
	|          775 |   61 |
	|          754 |   78 |
	|          702 |   35 |
	|          696 |   10 |
	|          694 |  101 |
	|          676 |   25 |
	|          675 |   45 |
	+--------------+------+
		

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:   Love

	
	SQL code used to arrive at answer:

	SELECT COUNT(id) AS Love
	FROM review
	WHERE text LIKE('%love%')
  
	+------+     
	| Love |
	+------+
	| 1780 |
	+------+
	
	SELECT COUNT(id) AS Hate
	FROM review
	WHERE text LIKE('%hate%')
  
	+------+
	| Hate |
	+------+
	|  232 |
	+------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name,
		     fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10
	
	Copy and Paste the Result Below:

	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
 toronto, restaurants
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	There is a different distribution of hours, but it is not specific to the 2 groups. The 3 businesses in the 2-3 stars group
	all have a similar distribution of hours which is similar to 1 of the 4-5 stars businesses. However the other 4-5 stars business
	has a completely different distribution of hours.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
	Yes, the 2 groups have a different number of reviews, but the difference does not point to anything conclusive.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
	
	The 2-3 stars restaurants are all located near eachother within the Down Town Toronto area, whereas the 4-5 stars
	restaurants are located more to the west of Toronto.
	Further analysis is required.

SQL code used for analysis:

		SELECT b.NAME,
       h.hours       AS Sun,
       h1.hours      AS Mon,
       h2.hours      AS Tue,
       h3.hours      AS Wed,
       h4.hours      AS Thu,
       h5.hours      AS Fri,
       h6.hours      AS Sat,
       CASE
         WHEN b.stars >= 2.0
              AND b.stars <= 3.0 THEN '2/3'
         WHEN b.stars >= 4.0 THEN '4/5'
       END           rating,
       b.review_count,
       b.postal_code AS Zipcode,
       b.address,
       b.neighborhood,
       b.latitude,
       b.longitude
FROM   business b
       INNER JOIN category c
               ON b.id = c.business_id
       INNER JOIN hours h
               ON b.id = h.business_id
       INNER JOIN hours h1
               ON b.id = h1.business_id
       INNER JOIN hours h2
               ON b.id = h2.business_id
       INNER JOIN hours h3
               ON b.id = h3.business_id
       INNER JOIN hours h4
               ON b.id = h4.business_id
       INNER JOIN hours h5
               ON b.id = h5.business_id
       INNER JOIN hours h6
               ON b.id = h6.business_id
WHERE  b.city = 'Toronto'
       AND c.category LIKE '%Restaurant%'
       AND sun LIKE 'Sunday%'
       AND mon LIKE 'Monday%'
       AND tue LIKE 'Tuesday%'
       AND wed LIKE 'Wednesday%'
       AND thu LIKE 'Thursday%'
       AND fri LIKE 'Friday%'
       AND sat LIKE 'Saturday%'
ORDER  BY rating; 
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
		
i. Difference 1:
    On average the businesses that are closed have 9 fewer reviews.
         
ii. Difference 2:
    
	The businesses that are still open have a slighty higher average star rating than those that are closed. 
         
         
SQL code used for analysis:

SELECT is_open,
       Round(Avg(stars), 2)        AS Avg_Rating,
       Round(Avg(review_count), 2) AS Avg_review_count,
       Count(is_open)
FROM   business
GROUP  BY is_open 
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
    
	I have chosen to analyze the effects of restaurants offering delivery as well as accepting credit cards. Specifcally, how do these two options impact a restaurants star rating and review count? 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
    
	This analysis is investigating whether a restaurant offering delivery, and whether a restaurant accepting credit cards has a positive, negative, or neutral effect on the restaurants star rating as well as their review count. In order to conduct this analysis, data will need to be pulled from three tables - business, category, and attribute. The tables need to be joined together with inner joins utilizing the business id as the key. Once the tables are joined the analysis may be performed and a union may be used to combine all of the data into one table. 
	These three tables were speficially chosen in order to access the 'BusinessAcceptsCreditCards' and 'RestaurantDelivery' data from the attribute table as well as their respective boolian values, the 'restaurants' data from the category table, and the 'stars' and 'review_count' data from the business table. This data was intentionally chosen for the purposes of filtering down the data to utilize only businesses from the restaurant category that contain the attributes of either the business accepting credit cards or the business offering delivery. Once filtered down as such, the data was then sorted into four groups - businesses the do and don't accept credit cards, and businesses that do and don't offer delivery. Finally, after filtering and sorting, the remaining data was then used to analyze the average star rating, the average review count, and the total review count for these groups.
                  
iii. Output of your finished dataset:

+----------------------------+-----------------+------------+------------------+--------------------+----------------------+
| attribute                  | attribute_value | Avg_rating | Avg_review_count | Total_review_count | Number_of_businesses |
+----------------------------+-----------------+------------+------------------+--------------------+----------------------+
| BusinessAcceptsCreditCards | 0               |        3.0 |             26.5 |                 53 |                    2 |
| BusinessAcceptsCreditCards | 1               |       3.18 |            59.36 |               1484 |                   25 |
| RestaurantsDelivery        | 0               |        3.1 |            53.58 |               1286 |                   24 |
| RestaurantsDelivery        | 1               |        3.0 |             41.6 |                208 |                    5 |
+----------------------------+-----------------+------------+------------------+--------------------+----------------------+      
         
iv. Provide the SQL code you used to create your final dataset:

SELECT a.NAME                        AS attribute,
       a.value                       AS attribute_value,
       Round(Avg(b.stars), 2)        AS Avg_rating,
       Round(Avg(b.review_count), 2) AS Avg_review_count,
       Sum(b.review_count)           AS Total_review_count,
       Count (*)                     AS Number_of_businesses
FROM   business b
       INNER JOIN attribute a
               ON b.id = a.business_id
       INNER JOIN category c
               ON b.id = c.business_id
WHERE  category LIKE '%restaurants%'
       AND a.NAME LIKE 'restaurantsdelivery'
GROUP  BY value
UNION
SELECT a.NAME                        AS attribute,
       a.value                       AS attribute_value,
       Round(Avg(b.stars), 2)        AS Avg_rating,
       Round(Avg(b.review_count), 2) AS Avg_review_count,
       Sum(b.review_count)           AS Total_review_count,
       Count (*)                     AS Number_of_businesses
FROM   business b
       INNER JOIN attribute a
               ON b.id = a.business_id
       INNER JOIN category c
               ON b.id = c.business_id
WHERE  category LIKE '%restaurants%'
       AND a.NAME LIKE 'businessacceptscreditcards'
GROUP  BY value
ORDER  BY a.NAME,
          value 



----------------------------------------

Further in-depth analysis

-----
SELECT b.NAME,
       a.NAME,
       a.value,
       b.stars,
       b.review_count
FROM   business b
       INNER JOIN attribute a
               ON b.id = a.business_id
       INNER JOIN category c
               ON b.id = c.business_id
WHERE  category LIKE '%restaurants%'
       AND a.NAME LIKE 'restaurantsdelivery'
ORDER  BY value,
          b.NAME
+----------------------------------------+---------------------+-------+-------+--------------+
| name                                   | name                | value | stars | review_count |
+----------------------------------------+---------------------+-------+-------+--------------+
| 99 Cent Sushi                          | RestaurantsDelivery | 0     |   2.0 |            5 |
| Big Smoke Burger                       | RestaurantsDelivery | 0     |   3.0 |           47 |
| Bootleggers Modern American Smokehouse | RestaurantsDelivery | 0     |   4.0 |          431 |
| Burger King                            | RestaurantsDelivery | 0     |   1.0 |            4 |
| Charlie D's Catfish & Chicken          | RestaurantsDelivery | 0     |   4.5 |            7 |
| Edulis                                 | RestaurantsDelivery | 0     |   4.0 |           89 |
| Famous Sam's                           | RestaurantsDelivery | 0     |   2.5 |            3 |
| Five Guys                              | RestaurantsDelivery | 0     |   3.5 |           63 |
| Flaming Kitchen                        | RestaurantsDelivery | 0     |   3.0 |           25 |
| Gallagher's                            | RestaurantsDelivery | 0     |   3.0 |           60 |
| Hermanos Mexican Grill                 | RestaurantsDelivery | 0     |   4.0 |           69 |
| Iron City Grille                       | RestaurantsDelivery | 0     |   2.0 |            3 |
| Mad Mex - South Hills                  | RestaurantsDelivery | 0     |   3.0 |          103 |
| Masamune Japanese Restaurant           | RestaurantsDelivery | 0     |   4.0 |           61 |
| McDonald's                             | RestaurantsDelivery | 0     |   2.0 |            8 |
| P & J Hamburgers Inn                   | RestaurantsDelivery | 0     |   3.0 |            3 |
| Papa Murphy's                          | RestaurantsDelivery | 0     |   4.0 |            4 |
| Poutine Lafleur                        | RestaurantsDelivery | 0     |   3.5 |           11 |
| Royal Dumpling                         | RestaurantsDelivery | 0     |   1.5 |            4 |
| Senor Taco                             | RestaurantsDelivery | 0     |   3.5 |           83 |
| Subway                                 | RestaurantsDelivery | 0     |   3.5 |            3 |
| The Kosher Gourmet                     | RestaurantsDelivery | 0     |   3.5 |            3 |
| Thirsty Goat                           | RestaurantsDelivery | 0     |   3.5 |           74 |
| Wingstop                               | RestaurantsDelivery | 0     |   3.0 |          123 |
| Mango Flats                            | RestaurantsDelivery | 1     |   2.5 |            5 |
| The Cider Mill                		     | RestaurantsDelivery | 1     |   4.0 |           91 |
| Pizzaiolo                         		 | RestaurantsDelivery | 1     |   3.0 |           34 |
| Papa Da Vinci                     		 | RestaurantsDelivery | 1     |   2.5 |           28 |
| Otto Onkel                    		     | RestaurantsDelivery | 1     |   3.0 |           50 |	
---------

SELECT b.NAME,
       a.NAME,
       a.value,
       b.stars,
       b.review_count
FROM   business b
       INNER JOIN attribute a
               ON b.id = a.business_id
       INNER JOIN category c
               ON b.id = c.business_id
WHERE  category LIKE '%restaurants%'
       AND a.NAME LIKE 'businessacceptscreditcards'
ORDER  BY value,
          b.NAME 
+----------------------------------------+----------------------------+-------+-------+--------------+
| name                                   | name                       | value | stars | review_count |
+----------------------------------------+----------------------------+-------+-------+--------------+
| Otto Onkel                             | BusinessAcceptsCreditCards | 0     |   3.0 |           50 |
| P & J Hamburgers Inn                   | BusinessAcceptsCreditCards | 0     |   3.0 |            3 |
| 99 Cent Sushi                          | BusinessAcceptsCreditCards | 1     |   2.0 |            5 |
| Big Smoke Burger                       | BusinessAcceptsCreditCards | 1     |   3.0 |           47 |
| Bootleggers Modern American Smokehouse | BusinessAcceptsCreditCards | 1     |   4.0 |          431 |
| Burger King                            | BusinessAcceptsCreditCards | 1     |   1.0 |            4 |
| Charlie D's Catfish & Chicken          | BusinessAcceptsCreditCards | 1     |   4.5 |            7 |
| Edulis                                 | BusinessAcceptsCreditCards | 1     |   4.0 |           89 |
| Famous Sam's                           | BusinessAcceptsCreditCards | 1     |   2.5 |            3 |
| Five Guys                              | BusinessAcceptsCreditCards | 1     |   3.5 |           63 |
| Gallagher's                            | BusinessAcceptsCreditCards | 1     |   3.0 |           60 |
| Hermanos Mexican Grill                 | BusinessAcceptsCreditCards | 1     |   4.0 |           69 |
| Iron City Grille                       | BusinessAcceptsCreditCards | 1     |   2.0 |            3 |
| Mad Mex - South Hills                  | BusinessAcceptsCreditCards | 1     |   3.0 |          103 |
| Mango Flats                            | BusinessAcceptsCreditCards | 1     |   2.5 |            5 |
| Masamune Japanese Restaurant           | BusinessAcceptsCreditCards | 1     |   4.0 |           61 |
| McDonald's                             | BusinessAcceptsCreditCards | 1     |   2.0 |            8 |
| Nabers Music, Bar & Eats               | BusinessAcceptsCreditCards | 1     |   4.0 |           75 |
| Papa Da Vinci                          | BusinessAcceptsCreditCards | 1     |   2.5 |           28 |
| Papa Murphy's                          | BusinessAcceptsCreditCards | 1     |   4.0 |            4 |
| Pizzaiolo                              | BusinessAcceptsCreditCards | 1     |   3.0 |           34 |
| Poutine Lafleur                        | BusinessAcceptsCreditCards | 1     |   3.5 |           11 |
| Senor Taco                             | BusinessAcceptsCreditCards | 1     |   3.5 |           83 |
| Subway                                 | BusinessAcceptsCreditCards | 1     |   3.5 |            3 |
| The Cider Mill                         | BusinessAcceptsCreditCards | 1     |   4.0 |           91 |
| Thirsty Goat                           | BusinessAcceptsCreditCards | 1     |   3.5 |           74 |
| Wingstop                               | BusinessAcceptsCreditCards | 1     |   3.0 |          123 |



